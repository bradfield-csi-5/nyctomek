Practice Problem 2.1

A.  0x39A7F8 to binary

       3     9     A     7     F     8
    0011  1001  1010  0111  1111  1000

    Answer: 1110011010011111111000.

B.  binary 1100100101111011 to hexadecimal

    1100  1001  0111  1011
       C     9     7     B

    Answer: C97B.

C.  0xD5E4C to binary

       D     5     E     4     C
    1101  0101  1110  0100  1100

    Answer: 11010101111001001100.


D.  binary 1001101110011110110101 to hexadecimal
           
    10 0110 1110 0111 1011 0101
     2    6    E    7    B    5

    Answer: 26E7B5.

Practice Problem 2.2

n    2^n (decimal)     2^n (hexadecimal)

9              512                 0x200
19          524288               0x80000
14           16384                0x4000
16           65536               0x10000
17          131072               0x20000
5               32                  0x20
7              128                  0x80

Practice Problem 2.3

Decimal        Binary      Hexdecimal
      0     0000 0000            0x00

167 = 10 * 16 + 7  (7)
 10 =  0 * 16 + 10 (A)
    167     1010 0111            0xA7 

62 = 3 * 16 + 14   (E)
 3 = 0 * 16 + 3    (3)
     62     0011 1110            0x3E

188 = 11 * 16 + 12 (C)
 11 = 0  * 16 + 11 (B)
    188     1011 1100            0xBC

3 * 16 + 7 = 55
55          0011 0111            0x37

8 * 16 + 8 = 136
136         1000 1000            0x88

15 * 16 + 3 = 243
243         1111 0011            0xF3

82          0101 0010            0x52
172         1010 1100            0xAC

14 * 16 + 7 = 231
231         1110 0111            0xE7

Practice Problem 2.4

A.  0x503c + 0x8    = 0x5044
B.  0x503c - 0x40   = 0x4ffc
C.  0x503c + 64     = 0x503c + 0x40 = 0x507c
D.  0x50ea - 0x503c = 0xea - 0x3c = 0xae

Practice Problem 2.5

int val = 0x87654321;
byte_pointer valp = (byte_pointer) &val;
show_bytes(valp, 1); /* A. */
show_bytes(valp, 2); /* B. */
show_bytes(valp, 3); /* C. */

A. Little endian: 21        Big endian: 87
B. Little endian: 21 43     Big endian: 87 65
C. Little endian: 21 43 65  Big endian: 87 65 43

Practice Problem 2.6

A.
Integer: 3510593      Hex: 0x00359141   Binary: 0000 0000 0011 0101 1001 0001 0100 0001
Float:   3510593.0    Hex: 0x4a564504   Binary: 0100 1010 0101 0110 0100 0101 0000 0100

B.
35109593  in binary: 00000000001101011001000101000001
3510593.0 in binary:   01001010010101100100010100000100
                                *********************
                                ^ These 21 bits match.

C.
The 2 least significant and 9 most significant bits (specifically the ones that are enabled from among the 9 most sigificant bits) of the float don't line up with the integer.  Also, the most set bit of the integer doesn't match the float, which is weird because I would have expected the entire integer pattern aside from leading zeroes to match a subset of the float.

Practice Problem 2.7

 61 62 63 64 65 66

Practice Problem 2.8

a     [01101001]
b     [01010101]
~a    [10010110]
~b    [10101010]
a & b [01000001]
a | b [01111101]
a ^ b [00111100]

Practice Problem 2.9

A.  Color    R  G  B    Complement
    Black    0  0  0    White 
    Blue     0  0  1    Yellow
    Green    0  1  0    Magenta
    Cyan     0  1  1    Red
    Red      1  0  0    Cyan
    Magenta  1  0  1    Green
    Yellow   1  1  0    Blue
    White    1  1  1    Black

B.  Blue | Green  = Cyan
    Yellow & Cyan = Green
    Red ^ Magenta = Blue

Practice Problem 2.10

void inplace_swap(int *x, int *y) {
    *y = *x ^ *y;  /* Step 1 */
    *x = *x ^ *y;  /* Step 2 */
    *y = *x ^ *y;  /* Step 3 */
}

Step         *x              *y
Initially     a              b
Step 1        a              a ^ b
Step 2        a ^ a ^ b      a ^ b
Step 3        a ^ a ^ b      b ^ a ^ b
Final         b              a

Practice Problem 2.11

A.
k

B.
In the final iteration, the call to inplace_swap gets the same pointer for both x and y parameters.  So it tries to swap a[k] with itself.  Since a ^ a = 0, both *x and *y - and therefore a[k] - are set to zero by the first line of inplace_swap.  After that, they stay as zero through the rest of inplace_swap - and therefore a[k] stay as zero.

C.
Changing the terminating condition from `first <= last` to `first < last` would eliminate this problem.

Practice Problem 2.12

A.  x & 0xFF
B.  ~(x ^ 0xFF) 
C.  x | 0xFF

Practice Problem 2.13

int bool_or(int x, int y) {
    int result = bis(x, y);
    return result;
}

int bool_xor(int x, int y) {
    int result = bis(bic(x, y), bic(y, x));
    return result;
}

Practice Problem 2.14

x = 0x66 = 01100110
y = 0x39 = 00111001

x & y    = 00100000 = 0x20      x && y   = 0x01
x | y    = 01111111 = 0x7f      x || y   = 0x01
~x | ~y  = 11011111 = 0xdf      !x || !y = 0x00
x & !y   = 00000000 = 0x00      x && ~y  = 0x01

Practice Problem 2.15

!(x^y)

Practice Problem 2.16

x
Hex     Binary
0xC3    11000011
0x75    01110101
0x87    10000111
0x66    01100110

x << 3
Hex     Binary
0x18    00011000
0xA8    10101000
0x38    00111000
0x30    00110000

Logical x >> 2
Hex     Binary
0x30    00110000
0x1D    00011101
0x21    00100001
0x19    00011001

Arithmetic x >> 2
Hex     Binary
0xF0    11110000
0x1D    00011101
0xE1    11100001
0x19    00011001

Practice Problem 2.27

/* Determine whether arguments can be added without overflow */
int uadd_ok(unsigned x, unsigned y) {
    return x + y > x;
}

Practice Problem 2.28

     x                     Additive Inverse      
Hex     Decimal             Decimal    Hex
0          0                  0         0
5          5                 11         B
8          8                  8         8
D         13                  3         3
F         15                  1         1

Practice Problem 2.45

Fractional value    Binary representation       Decimal representation
       1/8                0.001                              2^-3 = 0.125
       3/4                0.11                        2^-1 + 2^-2 = 0.75
       5/16               0.0101                      2^-2 + 2^-4 = 0.3125
    2 11/16              10.1011           2 + 2^-1 + 2^-3 + 2^-4 = 2.6875
      2 1/8              10.001                        2^1 + 2^-3 = 2.125
      5 7/8             101.111    2^2 + 2^0 + 2^-1 + 2^-2 + 2^-3 = 5.875
      3 3/16             11.0011          2^1 + 2^0 + 2^-3 + 2^-4 = 3.1875

Practice Problem 2.46

A.  What is the binary representation of 0.1 - x?
0.00000000000000000000000110011001100110011
  ***********************
       ^ 23 zeros
B.  What is the approximate decimal value of 0.1 - x?

    2^-24 + 2^-25 + 2^-28 + 2^-29 + 2^-32 + 2^-33 = 9.53441486e-8.

C.  ...the system had been running for around 100 hours.  What was the difference between the actual time and the time computed by the software?

    Every 0.1 seconds, 9.53441486e-8 seconds are lost.
    100 hours = 360000 seconds * 10 (because error is incurred every 0.1 seconds )=> ~ 0.343 seconds difference.

D.  Given that a Scud travels at around 2000 meters per second, how far off was its prediction?

    2000 * 0.343 = ~688.5 meters = ~ 2288 ft.

Practice Problem 2.47

Bits        e       E       2^E     f       M       2^E * M         V       Decimal
0 00 00     0       0        1      0      0.0          0           0         0
0 00 01     0       0        1     1/4     1/4         1/4         1/4        0.25    
0 00 10     0       0        1     1/2     1/2         1/2         1/2        0.5
0 00 11     0       0        1     3/4     3/4         3/4         3/4        0.75
0 01 00     1       0        1      0       1           1           1         1
0 01 10     1       0        1     1/2     3/2         3/2         3/2        1.5
0 01 11     1       0        1     3/4    1 3/4       1 3/4       1 3/4       1.75
0 10 00     2       1        2      0       1           2           2         2
0 10 01     2       1        2     1/4    1 1/4       2 1/2       2 1/2       2.5
0 10 10     2       1        2     1/2    1 1/2         3           3         3
0 10 11     2       1        2     3/4    1 3/4       3 1/2       3 1/2       3.5
0 11 00                                                           +inf
0 11 01                                                            nan
0 11 10                                                            nan
0 11 11                                                            nan

